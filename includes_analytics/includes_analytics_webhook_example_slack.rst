.. The contents of this file are included in multiple topics.
.. This file should not be changed in a way that hinders its ability to appear in multiple documentation sets.


A webhook for |chef analytics| enables real-time event streams to be sent to arbitrary locations that support webhooks integrations. For example, channels in |slack| may be configured to receive notifications from |chef analytics| by integrating with the incoming webhooks functionality in |slack|.

#. Create an incoming webhook in |slack|. Choose the channel that will receive the incoming notification:

   .. image:: ../../images/analytics_slack_incoming_webhooks.png

   and then click **Add Incoming Webhooks Integration**. Copy the URL that is generated by |slack|. This will be needed by |chef analytics|.

#. Log into |chef analytics| and create a **Webhook** notification:

   .. image:: ../../images/analytics_slack_notification.png

#. Name the webhook---``slack``, for example---and then paste the URL that was provided by |slack|:

   .. image:: ../../images/analytics_slack_http_configure.png

   Click **Save**.

#. Create a rule that uses this integration and test it. For example, configuring |chef analytics| to send a notification to |slack| when a |chef client_audit| run fails. First, create a simple rule to test the |slack| integration. Configure a message to be sent to |slack| for any action event that comes into |chef analytics|:

   .. code-block:: ruby

      rules 'org notifier'
        rule on action
        when
          true
        then
          notify('slack', '{
            "text": "test from the blog post"
          }')
        end
      end

   |slack| expects a |json| document to be sent to the incoming webook integration from |chef analytics|. |chef analytics| supports multi-line notifications to be written. Use the ``'text'`` property in the rule to send the data as a |json| document.

#. Finally, create a rule that is more specific to the |chef analytics| data, such as assigning an emoji and a name for the notification:

   .. code-block:: ruby

      rules 'failed-audit'
        rule on run_control_group
        when
          status != 'success'
        then
          notify('slack', '{
            "username": "Audit Alarm",
            "icon_emoji": ":rotating_light:",
            "text": "{{message.name}} (cookbook {{message.cookbook_name}})\n
              had \'{{message.number_failed}}\' failed audit test(s)\n
              on node \'{{message.run.node_name}}\'\n
              in organization \'{{message.organization_name}}\'"
          }')
        end
      end

   This will generate a message similar to:

   .. image:: ../../images/analytics_slack_message.png
