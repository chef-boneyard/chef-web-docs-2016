# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-03-14 17:09\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_why.rst:34
# 75753602f32b4dc38f7277d2eecababb
msgid "Why Chef?"
msgstr ""

#: ../../includes_chef/includes_chef_why_you_know_best.rst:5
# 8738635b80ab43c4b1f314d6321e6642
msgid "The idea that you know best about what should happen in your organization goes hand-in-hand with the notion that you still need help keeping it all running. It is rare that a single individual knows everything about a very complex problem, let alone knows all of the steps that may be required to solve them. The same is true with tools. |chef| provides help with infrastructure management. And |chef| can help solve very complicated problems. |chef| also has a large community of users who have a lot of experience solving a lot of very complex problems. That |chef| community can provide knowledge and support in areas that your organization may not have and (along with |chef|) can help your organization solve any complex problem."
msgstr ""

#: ../source/chef_why.rst:39
# 888866a2fa704e3597281eb89a3c9439
msgid "What are the core principles of Chef?"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles.rst:5
# 1a36d97d5a314cfbafb57f121938c6c8
msgid "The key underlying principle of |chef| is that you (the user) knows best about what your environment is, what it should do, and how it should be maintained. |chef| is designed to not make assumptions about any of those things. Only the individuals on the ground---that's you and your team---understand the technical problems and what is required to solve them. Only your team can understand the human problems (skill levels, audit trails, and other internal issues) that are unique to your organization and whether any single technical solution is viable."
msgstr ""

#: ../source/chef_why.rst:44
# e4d80c1e0db04a13b7bdd128a56a0f1b
msgid "Idempotence"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_idempotence.rst:5
# fccc041001e14f23a7e01d89db53dc41
msgid "A recipe can run multiple times on the same system and the results will always be identical. In |chef|, a resource is defined in a recipe, which then defines the actions to be performed on the system. |chef| ensures that actions are not performed if the resources have not changed and that any action that is performed is done the same way each time. If a recipe is re-run and nothing has change, then |chef| will not do anything."
msgstr ""

#: ../source/chef_why.rst:48
# c9745e040b7e440f98d668d37592f810
msgid "Thick Clients, Thin Server"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_thin_client.rst:5
# 989c092767db45688d84b8eb20658185
msgid "|chef| does as much work as possible on the node; a |chef client| runs on each node and it only interacts with the |chef server| when it needs to. The |chef server| is designed to distribute of data to each node easily, including all cookbooks, recipes, templates, files, and so on. The |chef server| also retains a copy of the state of the node at the conclusion of every |chef| run. This approach ensures that the actual work needed to configure each node in your infrastructure is distributed across the organization, rather than centralized on smaller set of configuration management servers."
msgstr ""

#: ../source/chef_why.rst:52
# 5c9a4922a4ad40018ba2978f63c6c098
msgid "Order Matters"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_order_matters.rst:5
# 25e995144eb5413698195accb768947b
msgid "When |chef| configures each node in the system, the order in which that configuration occurs is very important. For example, if |apache| is not installed, then it cannot be configured and the daemon cannot be started. Configuration management tools have struggled with this problem for a long time. With |chef|, for each node a list of recipes is applied, which in turn specifies resources. Within a recipe, resources are applied in the order in which they are listed. At any point in a recipe other recipes may be included, which assures that all resources are applied. |chef| will never apply the same recipe twice. Dependencies are only applied at the recipe level (and never the resource level). This means that dependencies can be tracked between high-level concepts like \"I need to install Apache before I can start my Django application!\" It also means that given the same set of cookbooks, |chef| will always execute resources in the same exact order."
msgstr ""

#: ../source/chef_why.rst:56
# bae7d7e9a7bd43e49d0a732ef7f530b0
msgid "Why was Chef created?"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:5
# 45e36ff7402d4152993e963643bcc63a
msgid "|opscode| began as a consulting company named HJK Solutions, which built fully automated infrastructure for startups. Everything from installing operating systems to full application development. Over the course of building a dozen or so different startups on the same basic infrastructure timeline (over a one year period), we realized that getting to a place where everyone could have a fully automated infrastructure, regardless of the expertise of their system administrators, was possible. Only a few things stood in the way:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:7
# d36a3005350a4bfda144318f79f0cb25
msgid "A fully automated infrastructure is a fully integrated infrastructure. The different components need to be able to communicate with each other. (Your application informs your infrastructure, just like your infrastructure informs your application.)"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:8
# 98dc86262fcc4b459d91ed77bd62aaff
msgid "Configuration management is the fundamental bedrock of infrastructure automation. For the infrastructure to be fully automated, it must expose configuration management as a service."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:9
# 2307286df59a4dc28633c8171b08d67c
msgid "Share the code that builds the infrastructure is difficult; the available tools required a level of specificity that made sharing difficult."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:10
# c26582345671481f946854f7071e7f71
msgid "No other open source tools met the requirements."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:12
# 142a816baefe4c32ad8c403ee02a67c8
msgid "We solve these problems by:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:14
# d0c461c823ab4442b9ecc37329acc9cc
msgid "Building a systems integration framework on top of a configuration management system, powered by |ruby| and a simple DSL. This approach makes it easy for beginners."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:15
# d25cc1a514d24c2f8638671c2979ea57
msgid "Making it possible to easily extend the capabilities of |chef| and by allowing |chef| to take instruction from ad-hoc sources."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:16
# 432e4b512e084789af427b71646f3bcb
msgid "Every decision about |chef| was made with an eye to keeping as much as possible inside of cookbooks, which are sharable chunks of automation that are easily reused and extended."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:17
# 3fa88650ab124587bf926877f6cfa739
msgid "Sharing an open source version of |chef| with everyone, creating an outstanding community, with a license that allows everyone to safely integrate |chef| into their environment. |chef| (and |ohai|) are licensed under the Apache License Version 2.0, a liberal, non-copyleft free software license. We maintain Contributor License Agreements, which allows anyone who uses |chef| (or |ohai|) to know they are free from any copyright or patent entanglements."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:19
# 366d3a2541794dd0b61562824bedf0a3
msgid "The goal is to remove people from the process of building automated infrastructure, as much and as often as possible. |chef| is the first part of a framework that will allow all of us to do that."
msgstr ""

#: ../source/chef_why.rst:60
# 08a8a2f92cd948a18f6c26918d46d003
msgid "How can I help?"
msgstr ""

#: ../source/chef_why.rst:61
# 3652987fe3dd4875973a8ec787377d9b
msgid "Join the |chef| community, participate in the discussion going on right now on IRC, sign up for the |chef| mailing Lists, and read the instructions on how to contribute to an |opscode| open source project."
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:4
# 8a027de330f2423e9801cb75047327df
msgid "Here are some contributions from the |chef| community:"
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:6
# 154f01fc0f994e7e8716fa05d6445352
msgid "**Workflow:**  `Berkshelf <http://berkshelf.com/>`_ | `Librarian <https://github.com/applicationsonline/librarian>`_ | `Spiceweasel <https://github.com/mattray/spiceweasel>`_"
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:8
# 168ab67c2315481682975b03780e9b26
msgid "**Development tools:**  `test-kitchen <https://github.com/opscode/test-kitchen>`_ | `Food Critic <http://acrmp.github.com/foodcritic/>`_ | `cucumber-chef <http://www.cucumber-chef.org/>`_ | `chef-workflow <https://github.com/chef-workflow>`_ | `chefspec <https://github.com/acrmp/chefspec>`_ | `Cookbooks <http://community.opscode.com/cookbooks>`_"
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:10
# 513c25bdee254fcfb5dc800679181f2a
msgid "**Discussion:** :doc:`Guidelines </community_guidelines>` | :doc:`lists.opscode.com </community_lists>` | `Food Fight Show <http://foodfightshow.org/>`_ --- **Chat channels:** `chef <http://community.opscode.com/chat/chef>`_ | `chef-hacking <http://community.opscode.com/chat/chef-hacking>`_ | `openstack-chef <http://community.opscode.com/chat/openstack-chef>`_"
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:12
# 141c394b22124a04a4438eb6bed6a77a
msgid "**Plugins:** :doc:`Chef </community_plugin_chef>` | :doc:`Knife </community_plugin_knife>` | :doc:`Ohai </community_plugin_ohai>` | :doc:`Report handlers </community_plugin_report_handler>` | `Ridley <https://github.com/reset/ridley>`_"
msgstr ""

#: ../source/chef_why.rst:66
# d2f12ae18d104a69a369d25c1c88b101
msgid "Do I really need to know Ruby?"
msgstr ""

#: ../source/chef_why.rst:67
# d2d622ae514e4faa8f8fa4b690509bbd
msgid "It helps, but its not required. You can learn :doc:`Just Enough Ruby for Chef </just_enough_ruby_for_chef>`."
msgstr ""

#: ../source/chef_why.rst:70
# 1d0a34a323be4620a1f04bd943dd000b
msgid "Can I trust |chef|?"
msgstr ""

#: ../source/chef_why.rst:71
# e635fd19bae34c4ab8bb5d58e8ec5ec4
msgid "Yes, absolutely. |chef| will not do anything to your system that isn't in a recipe. Because |chef| is an open source project, you have full access to the source code."
msgstr ""

#: ../source/chef_why.rst:75
# 3e3a8081f9c04a6496ac8a2c9eebfc4b
msgid "Who uses Chef?"
msgstr ""

#: ../source/chef_why.rst:76
# 124c1f85c8fa48c2993fc36a8330e28d
msgid "Lots of companies, ranging from `small startups to the largest companies on the planet <http://www.opscode.com/customers/>`_."
msgstr ""

#: ../source/chef_why.rst:79
# 43384f2a79a84c6c9b1f36addc2b26ad
msgid "Why the Apache license?"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:5
# 3a0a287ba379414a9e0e351b933a71cf
msgid "The short version is that we had three broad requirements for the license under which we would release open source software:"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:7
# a74d867b414f4485957ad35e46b9ae40
msgid "We are an open source company. We make money from our open source software. We wanted a license that allowed us to build a business from the things we created"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:8
# c08147f4417e4b058c019cbf0fcddabe
msgid "We wanted anyone (or any company) whose problems were solved by our software to be able to use it, in any environment they wanted, in whatever way they wanted"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:9
# 354e21fe85b044b9b0f2615f530da445
msgid "We wanted to build an open and equal community of users. We did not want to reserve any rights for ourselves that we didn’t grant to the all of the other people (and companies) who helped build our software"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:11
# 0085fbb1e7ee40c58f9b85ec70ecfe98
msgid "For more detail, read `the blog post about why we love open source <http://www.opscode.com/blog/2009/08/11/why-we-chose-the-apache-license/>`_."
msgstr ""

#: ../source/chef_why.rst:84
# 93e1acbd25be4ce6862cb1b686a21d0a
msgid "Comparisons"
msgstr ""

#: ../source/chef_why.rst:85
# 22f72470cd304c84b7b1bffd2f66df63
msgid "There are some other applications out there that do things similar to |chef|. We believe that we are different (and better) and that by choosing |chef| you are choosing the best option."
msgstr ""

#: ../source/chef_why.rst:88
# b1e816bde6d0467c82cae4386371baac
msgid "|puppet|"
msgstr ""

#: ../source/chef_why.rst:89
# e67c6f78b39e4574844a431e6301f49e
msgid "|puppet| evolved from |cfengine| and showed potential to be a new kind of configuration management. The original design of |chef| was strongly influenced by our own experiences working with and contributing to the |puppet| project. That said, |chef| does not share any code from |puppet|, and is not a \"fork\" of the |puppet| project."
msgstr ""

#: ../source/chef_why.rst:91
# 96c3afda697e46648a292f184a82a937
msgid "|chef| is different from |puppet| in a number of important ways:"
msgstr ""

#: ../source/chef_why.rst:93
# 6a0fceb7c53546eda3b2eb1914187fa2
msgid "|chef| uses |ruby| as the configuration language, as opposed to a custom DSL"
msgstr ""

#: ../source/chef_why.rst:94
# 3d4861bebc5f4075acb9bb92acf023d8
msgid "|chef| is designed from the ground up to integrate with other tools, or to make that integration as simple as possible. |chef| is not the canonical representation of your infrastructure. It is a service that exposes data about the state of your infrastructure"
msgstr ""

#: ../source/chef_why.rst:95
# 2d6c86d0c51a47b3ae34b30eeb833c4d
msgid "|chef| applies resources in the order they are specified in recipes. There is no dependency management. This means multiple |chef| runs will always apply the resources under management in the same order, every time"
msgstr ""

#: ../source/chef_why.rst:96
# dec66abcbb0c4b14af2bcb24e70d349e
msgid "|chef| resources have actions, which can be signaled"
msgstr ""

#: ../source/chef_why.rst:97
# a15b951206a44ef9a75de03cd4a5cfc0
msgid "Resources can appear more than once in |chef|, and they inherit the attributes of the earlier resource. In other words, you can tell |apache| to start and stop in a recipe by specifying the resource twice, with the second one only changing the action attribute"
msgstr ""

#: ../source/chef_why.rst:100
# 8faa849be80743c49fbc5b8395732b69
msgid "As |chef| grows, the services we expose will likely be integrated with |puppet| as well. There is more than one way to do it."
msgstr ""

#: ../source/chef_why.rst:103
# 6ca49918886c497499d672dea1225aae
msgid "|cfengine|"
msgstr ""

#: ../source/chef_why.rst:104
# 48e24a4baa2048dd93fb38a583897a2d
msgid "|cfengine| and |chef| aren't very similar at all, outside of both applications embracing the concept of Single Copy Nirvana."
msgstr ""

#: ../source/chef_why.rst:131
# 9a9e1bd5cb6b458eab63f5fdfce07393
msgid "xxxxx:"
msgstr ""

#: ../source/chef_why.rst:137
#: ../source/chef_why.rst:139
#: ../source/chef_why.rst:140
# 0837677b8b0c419c9999b470e34e7b79
# 196da9735ba64d519629823973389193
# 63b22dfe08934aeda653debd20113f46
msgid "xxxxx"
msgstr ""

#: ../source/chef_why.rst:138
# 1457da3c522741e3a5838529a585f6c9
msgid "Description"
msgstr ""

#: ../source/chef_why.rst:145
# 47081700f5a3491d91c29a66cd0faa13
msgid "Conclusion"
msgstr ""

#: ../source/chef_why.rst:149
# ba9e7f663d82467dba7a0f89120285a6
msgid "For more information ..."
msgstr ""

#: ../source/chef_why.rst:150
# 7f724f359c55449190294dee33f96325
msgid "For history of |chef|, where it came from and how it evolved, watch these two (short) videos:"
msgstr ""

#: ../source/chef_why.rst:152
# 3f30bd4bd1fa438c93720c0ef6560b4d
msgid "Part one: |http opscode youtube short part one|"
msgstr ""

#: ../source/chef_why.rst:153
# 6369d36eda8e44b5b497ac1aca7ab3cc
msgid "Part two: |http opscode youtube short part two|"
msgstr ""

#: ../source/chef_why.rst:155
# e296a1eedbbd4e48856461b651e034ff
msgid "For more information about |opscode|, cookbooks for |chef|, and the |chef| community:"
msgstr ""

#: ../source/chef_why.rst:157
# 25446a41e01d4e868960d461f6e74c51
msgid "|http opscode|"
msgstr ""

#: ../source/chef_why.rst:158
# 7d0cdae22ae24530924740bd973e9518
msgid "|http community|"
msgstr ""

#: ../source/chef_why.rst:159
# 98d4c8bb4e424325b79726cb3689de5c
msgid "|http community cookbooks|"
msgstr ""

