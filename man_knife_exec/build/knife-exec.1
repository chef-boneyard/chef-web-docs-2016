.TH "KNIFE-EXEC" "1" "October 05, 2012" "0.0.1" "knife-exec"
.SH NAME
knife-exec \- knife-exec
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.\" Man page generated from reStructuredText.
.
.sp
The \fBexec\fP sub\-command uses the Knife configuration file to execute Ruby scripts in the context of a fully configured chef\-client. This sub\-command is most often used to run scripts that will only access Chef server one time (or otherwise very infrequently). Use this command any time that an operation does not warrant full usage of the Knife sub\-command library.
.sp
For Ruby scripts that will be run using the \fBexec\fP sub\-command, note the following:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
The Ruby script must be located on the system from which Knife is run (and not be located on any of the systems that Knife will be managing).
.IP \(bu 2
Shell commands will be run from a management workstation. For example, something like \fB%x[ls \-lash /opt/only\-on\-a\-node]\fP would give you the directory listing for the "opt/only\-on\-a\-node" directory or a "No such file or directory" error if the file does not already exist locally.
.IP \(bu 2
When the Shef DSL is available, the chef\-client DSL will not be (unless the management workstation is also a chef\-client). Without the chef\-client DSL, a bash block cannot be used to run bash commands.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
This sub\-command has the following syntax:
.sp
.nf
.ft C
knife exec SCRIPT (options)
.ft P
.fi
.sp
This sub\-command has the following options:
.INDENT 0.0
.TP
.B \fB\-c CONFIG\fP, \fB\-\-config CONFIG\fP
The configuration file to use.
.TP
.B \fB\-\-color\fP
Indicates that colored output will be used.
.TP
.B \fB\-\-defaults\fP
Indicates that Knife will use the default value, instead of asking a user to provide one.
.TP
.B \fB\-e EDITOR\fP, \fB\-\-editor EDITOR\fP
The $EDITOR that is used for all interactive commands.
.TP
.B \fB\-E CODE\fP, \fB\-\-exec CODE\fP
A string of code that will be executed.
.TP
.B \fB\-E ENVIRONMENT\fP, \fB\-\-environment ENVIRONMENT\fP
The name of the Chef server environment.
.TP
.B \fB\-F FORMAT\fP, \fB\-\-format FORMAT\fP
The output format: \fBsummary\fP (default), \fBtext\fP, \fBjson\fP, \fByaml\fP, and \fBpp\fP.
.TP
.B \fB\-h\fP, \fB\-\-help\fP
Shows help for Knife or for a sub\-command.
.TP
.B \fB\-k KEY\fP, \fB\-\-key KEY\fP
The API key that a chef\-client must provide before it can access a Chef server.
.TP
.B \fB\-\-no\-color\fP
Indicates that color will not be used in the output.
.TP
.B \fB\-n\fP, \fB\-\-disable\-editing\fP
Indicates that $EDITOR will not be opened; data will be accepted as\-is.
.TP
.B \fB\-p PATH:PATH\fP, \fB\-\-script\-path PATH:PATH\fP
A colon\-separated path at which Ruby scripts are located.
.TP
.B \fB\-\-print\-after\fP
Indicates that data will be shown after a destructive operation.
.TP
.B \fB\-s URL\fP, \fB\-\-server\-url URL\fP
The URL for the Chef server.
.TP
.B \fB\-u USER\fP, \fB\-\-user USER\fP
The user name for the chef\-client.
.TP
.B \fB\-v\fP, \fB\-\-version\fP
Shows the version of Chef.
.TP
.B \fB\-V\fP, \fB\-\-verbose\fP
Set for more verbose outputs. Use \fB\-VV\fP for maximum verbosity.
.TP
.B \fB\-y\fP, \fB\-\-yes\fP
Indicates that "yes" will be the response to all confirmation prompts (and that Knife will not ask a user for confirmation).
.UNINDENT
.sp
There are three ways to use \fBknife exec\fP to run Ruby script files. For example:
.sp
.nf
.ft C
$ knife exec /path/to/script_file
.ft P
.fi
.sp
Or:
.sp
.nf
.ft C
$ knife exec \-E \(aqRUBY CODE\(aq
.ft P
.fi
.sp
Or:
.sp
.nf
.ft C
$ knife exec
RUBY CODE
^D
.ft P
.fi
.sp
For example, to list all of the available search indexes, enter:
.sp
.nf
.ft C
$ knife exec \-E \(aqputs api.get("search").keys\(aq
.ft P
.fi
.sp
Or to show the available free memory for all nodes, enter:
.sp
.nf
.ft C
$ knife exec \-E \(aqnodes.all {|n| puts "#{n.name} has #{n.memory.total} free memory"}\(aq
.ft P
.fi
.sp
Or to check the status of Knife using a Ruby script named "status.rb" (which looks like):
.sp
.nf
.ft C
printf "%\-5s %\-12s %\-8s %s\en", "Check In", "Name", "Ruby", "Recipes"
nodes.all do |n|
   checkin = Time.at(n[\(aqohai_time\(aq]).strftime("%F %R")
   rubyver = n[\(aqlanguages\(aq][\(aqruby\(aq][\(aqversion\(aq]
   recipes = n.run_list.expand.recipes.join(", ")
   printf "%\-20s %\-12s %\-8s %s\en", checkin, n.name, rubyver, recipes
end
.ft P
.fi
.sp
and is located in a directory named "scripts", enter:
.sp
.nf
.ft C
$ knife exec scripts/status.rb
.ft P
.fi
.sp
To query a node for multiple attributes using a Ruby script named search_attributes.rb (which looks like):
.sp
.nf
.ft C
% cat scripts/search_attributes.rb
query = ARGV[2]
attributes = ARGV[3].split(",")
puts "Your query: #{query}"
puts "Your attributes: #{attributes.join(" ")}"
results = {}
search(:node, query) do |n|
   results[n.name] = {}
   attributes.each {|a| results[n.name][a] = n[a]}
end

puts results
exit 0
.ft P
.fi
.sp
enter:
.sp
.nf
.ft C
% knife exec scripts/search_attributes.rb "hostname:test_system" ipaddress,fqdn
.ft P
.fi
.sp
to return something like:
.sp
.nf
.ft C
Your query: hostname:test_system
Your attributes: ipaddress fqdn
{"test_system.example.com"=>{"ipaddress"=>"10.1.1.200", "fqdn"=>"test_system.example.com"}}
.ft P
.fi
.SH AUTHOR
Opscode, Inc.
.SH COPYRIGHT
2012, Opscode, Inc
.\" Generated by docutils manpage writer.
.
