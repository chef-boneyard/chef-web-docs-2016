.. Description strings that begin with the letter S.
.. The pattern is |sxxxx| replace:: string.
.. 
.. 

.. S
.. 

.. |sandbox_path| replace:: The location in which cookbook files are stored (temporarily) during upload.

.. |script-path| replace:: A colon-separated path at which |ruby| scripts are located.
.. |search index| replace:: A search index is a full-text list of objects that are stored on the |chef server|, against which search queries can be made.

.. |search index_data_bag| replace:: A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|.
.. |search index_environment| replace:: An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|.
.. |search index_node| replace:: A node is any server or virtual server that is configured to be maintained by a |chef client|.
.. |search index_role| replace:: A role is a way to define certain patterns and processes that exist across nodes in an organization as belonging to a single job function.

.. |search key| replace:: A key (or field name) is located in the |json| description for the object that is to be searched.
.. |search pattern| replace:: A search pattern is a way to fine-tune search results by returning anything that matches some type of incomplete search query.
.. |search operator| replace:: A Boolean operator can be used to ensure that certain terms are included in the results, are excluded from the results, or are not included even when other aspects of the query match.
.. |search partial| replace:: A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|.
.. |search query syntax| replace:: A search query is comprised of two parts: the key and the search pattern.
.. |search special character| replace:: A special character can be used to fine-tune a search query and to increase the accuracy of the search results.
.. |search target| replace:: A search target is any object that has been indexed on the |chef server|, including roles (and run-lists), nodes, environments, data bags, and any |chef api client|.


.. |search_index| replace:: The name of the index to be queried: ``client``, ``environment``, ``node``, ``role``, or ``DATA_BAG_NAME``.
.. |search_query| replace:: The search query used to identify a a list of items on a |chef server|. This option uses the same syntax as the ``search`` sub-command.
.. |search_query ssh| replace:: The search query used to return a list of servers to be accessed using |ssh| and the specified ``SSH_COMMAND``. This option uses the same syntax as the search sub-command.
.. |secret| replace:: The encryption key that is used for values contained within a data bag.
.. |secret-file| replace:: The path to the file that contains the encryption key.



.. |server_aliases| replace:: An array of server aliases.

.. |server_hooks lwrp gunicorn_config| replace:: A hash with values that are rendered as |gunicorn| server hook functions named after the hash item's key name. Default value: ``{}`` (no server hooks).
.. |serverurl lwrp application_php_mod| replace:: An array of server aliases.
.. |serverurl lwrp supervisor| replace:: The URL passed in the environment to the sub-process process.

.. |settings lwrp application_python_django| replace:: A hash of additional settings that will be made available to a template.






.. |shallow_clone| replace:: Indicates that the clone depth is set to ``5``.

.. |shell| replace:: The login shell.


.. |signing_ca_cert| replace:: The path to where the certificate is located. This setting is generated automatically by the |chef client| and is passed to |open ssl|.
.. |signing_ca_country| replace:: The country code associated with the |ca| policy. This setting is passed by the |chef client| to |open ssl|.
.. |signing_ca_domain| replace:: The domain associated with the |ca| policy. This setting is passed by the |chef client| to |open ssl|.
.. |signing_ca_email| replace:: The email address associated with the |ca| policy. This setting is passed by the |chef client| to |open ssl|.
.. |signing_ca_group| replace:: The group associated with the |ca| policy. This setting is passed by the |chef client| to |open ssl|.
.. |signing_ca_key| replace:: The path to where the private key is located. This setting is generated automatically by the |chef client| and is passed to |open ssl|.
.. |signing_ca_location| replace:: The location associated with the |ca| policy. This setting is passed by the |chef client| to |open ssl|.
.. |signing_ca_org| replace:: The organization associated with the |ca| policy. This setting is passed by the |chef client| to |open ssl|.
.. |signing_ca_state| replace:: The state (or province) associated with the |ca| policy. This setting is passed by the |chef client| to |open ssl|.
.. |signing_ca_user| replace:: The user associated with the |ca| policy. This setting is passed by the |chef client| to |open ssl|.

.. |size volume| replace:: The size of the volume (in gigabytes).

.. |size disk| replace:: The size of a disk, in GB.

.. |skip-dependencies| replace:: Indicates that all cookbooks to which the installed cookbook has a dependency will not be installed.

.. |slicehost-password1| replace:: The administrative password for the server.


.. |snapshots_to_keep| replace:: The number of snapshots to maintain. This attribute is available only when the ``:prune`` action is used.

.. |socket fcgi| replace:: The |fcgi| socket for a program.
.. |socket mode| replace:: A parameter that specifies the permission mode.
.. |socket owner| replace:: The user and group for a |fcgi| socket.
.. |solo mode| replace:: Indicates whether the |chef client| is being run in |chef solo| mode. This setting determines if the |chef client| should attempt to communicate with the |chef server|.
.. |solr_data_path| replace:: The location in which the |apache solr| indexes are located. Default value: ``/var/chef/solr/data``.
.. |solr_heap_size| replace:: The amount of memory allocated to the |jvm| that is being used to run |apache solr|. Default value: ``256M``.
.. |solr_home_path| replace:: The path to the |apache solr| home directory. Default value: ``/var/chef/solr``.
.. |solr_java_opts| replace:: The additional options (if any) that are passed to the |jvm| that is being used to run |apache solr|. Default value: ``nil``.
.. |solr_jetty_path| replace:: The path to the settings that control the |apache jetty| environment. Default value: ``/var/chef/solr-jetty``.
.. |solr_url| replace:: The URL for the server from which the |apache solr| search engine is run. Default value: ``http://localhost:8983``.
.. |sort| replace:: The order in which search results will be sorted.
.. |sort_reverse| replace:: Indicates that the list will be sorted by last run time, descending.


.. |source lwrp dmg_package| replace:: The remote URL for the |apple disk image| to be download. Default value: ``nil``.

.. |source lwrp freebsd| replace:: A template that is used to create the port options file. For example: ``source "freebsd-php5-options.erb"``.




.. |source file_location chef_11-4| replace:: The location (URI) of the source file.

.. |source file_location| replace:: The location (URI) of the source file. This value may also specify HTTP (``http://``), FTP (``ftp://``),  or local (``file://``) source file locations.

.. |source windows_package| replace:: A URI or a local path that specifies the source of a |windows| installer.
.. |source windows_zipfile| replace:: A URI or a local path that specifies the source of a |zip| file.



.. |source resource remote_file| replace:: The base name of the source file (and inferred from the ``path`` attribute).
.. |source resource template| replace:: The location of the template source file. Default value: ``nil``.


.. |source resource package| replace:: Optional. The package source for providers that use a local file (such as |rubygems|, |debian dpkg|, |yum| or |rpm|).
.. |source resource remote_directory| replace:: The base name of the source file (and inferred from the ``path`` attribute).


.. |source resource yum| replace:: Indicates that the ``yum localinstall`` command will be used. When this attribute is specified, |yum| will use repositories to satisfy any remote dependencies. Default value: none.
.. |source-image| replace:: The name of the disk image that will be used to create the virtual machine.

.. |splay| replace:: A number (in seconds) to add to the ``interval`` that is used to determine the frequency of |chef client| runs. This number can help prevent server load when there are many clients running at the same time. Default value: ``nil``.

.. |ssh_command| replace:: The command that will be run against the results of a search query.
.. |ssh-gateway| replace:: The |ssh| tunnel or gateway that is used to run a bootstrap action on a machine that is not accessible from the workstation.
.. |ssh-key amazon ec2| replace:: The |ssh| key for the |amazon ec2| environment.
.. |ssh-key eucalyptus| replace:: The |ssh| key for the |eucalyptus| environment.
.. |ssh-key hp| replace:: The |ssh| key for the |hp cloud| environment.
.. |ssh-key openstack| replace:: The |ssh| key for the |openstack| environment.
.. |ssh-password| replace:: The |ssh| password. This can be used to pass the password directly on the command line. If this option is not specified (and a password is required) |knife| will prompt for the password.
.. |ssh-port| replace:: The |ssh| port.
.. |ssh-user| replace:: The |ssh| user name.
.. |ssh_wrapper resource| replace:: The path to the wrapper script used when running |ssh| with |git|. The ``GIT_SSH`` environment variable is set to this.

.. |ssl_ca_file| replace:: The file in which the |open ssl| key is saved. This setting is generated automatically by the |chef client| and most users will not need to modify it.
.. |ssl_ca_path| replace:: The path to where the |open ssl| key is located. This setting is generated automatically by the |chef client| and most users will not need to modify it.




.. |ssl_certificate| replace:: The |ssl| certificate used to verify communication over HTTPS.
.. |ssl_certificate key| replace:: The certificate key used for |ssl| communication.

.. |ssl_certificate verify| replace:: Indicates whether SSL certificates are verified.

.. |ssl_client_cert| replace:: The |open ssl| |x509| certificate. This setting is generated automatically by the |chef client| and most users will not need to modify it.
.. |ssl_client_key| replace:: The |open ssl| |x509| key. This setting is generated automatically by the |chef client| and most users will not need to modify it.
.. |ssl_verify_mode| replace:: The verify mode for HTTPS requests. Set to ``:verify_none`` to not send certificate requests. Set to ``:verify_peer`` to send certificate requests to a |chef client|. For users of |chef hosted|, ``:verify_peer`` is recommended as the verification mode; depending on how |open ssl| is configured, the ``ssl_ca_path`` may need to be specified.

.. |start| replace:: The row at which return results will begin.


.. |startretries| replace:: The number of serial failure attempts |python supervisor| will allow when attempting to start a program before giving up.
.. |startsecs| replace:: The length of time (in seconds) a program will stay running after startup, at which point the startup will be considered successful.

.. |static_files lwrp application_nginx_load_balancer| replace:: A hash that maps URLs to files. Default value: ``{}``.

.. |stdin chef_apply| replace:: Use to execute a resource using standard input.

.. |stderr_capture_maxbytes| replace:: The maximum number of bytes written to capture for ``stderr_logfile``.
.. |stderr_events_enabled| replace:: Indicates whether events are omitted from ``stderr_logfile``.
.. |stderr_logfile| replace:: The location of the STDERR logfile.
.. |stderr_logfile_backups| replace:: The number of ``stderr_logfile`` backups to keep.
.. |stderr_logfile_maxbytes| replace:: The maximum size (in bytes) that may be consumed by ``stderr_logfile`` before it is rotated.
.. |stdout_capture_maxbytes| replace:: The maximum number of bytes written to capture for ``stdout_logfile``.
.. |stdout_events_enabled| replace:: Indicates whether events are omitted from ``stdout_logfile``.
.. |stdout_logfile| replace:: The location of the STDOUT logfile.
.. |stdout_logfile_backups| replace:: The number of ``stdout_logfile`` backups to keep.
.. |stdout_logfile_maxbytes| replace:: The maximum size (in bytes) that may be consumed by ``stdout_logfile`` before it is rotated.



.. |stopsignal| replace:: The signal used to kill a program when a stop is requested: ``TERM``, ``HUP``, ``INT``, ``QUIT``, ``KILL``, ``USR1``, or ``USR2``.
.. |stopwaitsecs| replace:: The amount of time (in seconds) to wait (after ``stopsignal``) before a ``SIGKILL`` message is sent.

.. |storage account| replace:: The name of the storage account used with the hosted service.
.. |strategy lwrp application| replace:: The deploy strategy: ``timestamped_deploy`` or ``deploy_revision`` (default). Use ``deploy_revision`` to ensure that the name of a release sub-directory is based on a revision identifier and puts deployed components under the destination location that is owned by the user who runs the application. For users of |git|, this will be the familiar SHA checksum. For users of |svn|, it will be the integer revision number. If a name other than a revision identifier is provided---branch names, tags, and so on---the |chef client| will ignore the alternate names and will look up the revision identifier and use it to name the release sub-directory. Use ``timestamped_deploy`` to name a release sub-directory with a timestamp in the form of YYYYMMDDHHMMSS. For example: /my/deploy/dir/releases/20121120162342.

.. |subnet| replace:: The |amazon vpc| instance in which a node will be created.

.. |success_codes| replace:: Use to set an array of possible successful installation return codes.


.. |sudo| replace:: Indicates that a bootstrap operation should be executed using |sudo cmd|.




.. |supervisor_inet_port| replace:: The port on which to serve the internal web-based admin dashboard. For example: 'localhost:9001'.
.. |supervisor_inet_username| replace:: The user name used to authenticate to the HTTP server.
.. |supervisor_inet_password| replace:: The password used during authentication to the HTTP server. This setting supports both clear text and SHA-1 hashed passwords (that are prefixed by ``{SHA}``).
.. |supervisor_dir| replace:: The location of supervisor configuration files.
.. |supervisor_log_dir| replace:: The location of supervisor log files.
.. |supervisor_logfile_maxbytes| replace:: The maximum size (in bytes) of the ``supervisord`` log file. When this file reaches this size, it will be rotated. Default value: ``50MB``.
.. |supervisor_logfile_backups| replace:: The number of backups of the log file that will be kept. Default value: ``10``.
.. |supervisor_loglevel| replace:: The minimum severity level for logged messages. Default value ``info``.
.. |supervisor_minfds| replace:: The minimum number of file descriptors that must be available before ``supervisord`` will start successfully.
.. |supervisor_minprocs| replace:: The minimum number of process descriptors that must be available before ``supervisord`` will start successfully.
.. |supervisor_version| replace:: Sets the version of ``supervisor`` to install; must be version 3.0 (or higher) to use ``minprocs`` and ``minfds``.



.. |supports lwrp bluepill_service| replace:: A list of attributes that controls how the |chef client| will attempt to manage a service: ``:restart``, ``:reload``, ``:status``. For ``:restart``, the init script or other service provider can use a restart command; if ``:restart`` is not specified, the |chef client| will attempt to stop and then start a service. For ``:reload``, the init script or other service provider can use a reload command. For ``:status``, the init script or other service provider can use a status command to determine if the service is running; if ``:status`` is not specified, the |chef client| will attempt to match the ``service_name`` against the process table as a regular expression, unless a pattern is specified as a parameter attribute. Default value: ``{ :restart => true, :status => true }``.
.. |supports chef_handler| replace:: The type of handler to be registered as: ``:report``, ``:exception`` or ``both``. Default value: ``{ :report => true, :exception => true }``.
.. |supports resource mount| replace:: A hash of options for supported mount features. Default value: ``{ :remount => false }``.
.. |supports resource service| replace:: A list of attributes that controls how the |chef client| will attempt to manage a service: ``:restart``, ``:reload``, ``:status``. For ``:restart``, the init script or other service provider can use a restart command; if ``:restart`` is not specified, the |chef client| will attempt to stop and then start a service. For ``:reload``, the init script or other service provider can use a reload command. For ``:status``, the init script or other service provider can use a status command to determine if the service is running; if ``:status`` is not specified, the |chef client| will attempt to match the ``service_name`` against the process table as a regular expression, unless a pattern is specified as a parameter attribute. Default value: ``{ :restart => true, :status => true }``.
.. |supports resource user| replace:: A Mash where keys represent features and values are booleans that indicate if that feature is supported. Default value: ``:manage_home => false, :non_unique => false``.

.. |svn_arguments resource| replace:: The extra arguments that are passed to the |svn| command.
.. |svn_info_args resource| replace:: Use when the ``svn info`` command is used by the |chef client| and arguments need to be passed. (The ``svn_arguments`` command does not work when the ``svn info`` command is used.)
.. |svn_password resource| replace:: The password for the user that has access to the |svn| repository.
.. |svn_username resource| replace:: The user name for a user that has access to the |svn| repository.

.. |symlink_before_migrate| replace:: Use this attribute to map files in a shared directory to the current release directory. The symbolic links for these files will be created before any migration is run. Use ``symlink_before_migrate({})`` or ``symlink_before_migrate nil`` instead of ``symlink_before_migrate {}`` because ``{}`` will be interpreted as a block rather than an empty hash. Set to ``nil`` to prevent the creation of default symbolic links. Default value: ``{"config/database.yml" => "config/database.yml"}``.
.. |symlink_before_migrate lwrp application| replace:: A hash that maps files in a shared directory into the current release. Runs before migration.
.. |symlinks| replace:: Use this attribute to map files in a shared directory to their paths in the current release directory. This attribute runs after ``create_dirs_before_symlink`` and ``purge_before_symlink``. Default value: ``{"system" => "public/system", "pids" => "tmp/pids", "log" => "log"}``.
.. |symlinks lwrp application| replace:: A hash that maps files in a shared directory to their paths in the current release.

.. |syntax_check_cache_path| replace:: All files in a cookbook must contain valid |ruby| syntax. Use this setting to specify the location in which |knife| caches information about files that have been checked for valid |ruby| syntax.

.. |system resource group| replace:: Indicates whether a group is a system group (``true``) or is not a system group (``false``). Default value: ``nil``.
.. |system resource user| replace:: Indicates that a system user should be created. This attribute may be used with ``useradd`` as the provider to create a system user which passes the ``-r`` flag to ``useradd``. Default value: ``nil``.



